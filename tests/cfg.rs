use dotenv::dotenv;
use paprika::cfg;

#[ctor::ctor]
fn init() {
    dotenv().ok();
}
// data/helloworld.sol: runtime code, not creation code
const HELLO_WORLD_BYTECODE_1: &str = "608060405234801561000f575f5ffd5b506004361061003f575f3560e01c80630c55699c146100435780634018d9aa146100615780635197c7aa14610091575b5f5ffd5b61004b6100af565b60405161005891906100e4565b60405180910390f35b61007b6004803603810190610076919061012b565b6100b4565b6040516100889190610170565b60405180910390f35b6100996100c4565b6040516100a691906100e4565b60405180910390f35b5f5481565b5f815f8190555060019050919050565b5f5f54905090565b5f819050919050565b6100de816100cc565b82525050565b5f6020820190506100f75f8301846100d5565b92915050565b5f5ffd5b61010a816100cc565b8114610114575f5ffd5b50565b5f8135905061012581610101565b92915050565b5f602082840312156101405761013f6100fd565b5b5f61014d84828501610117565b91505092915050565b5f8115159050919050565b61016a81610156565b82525050565b5f6020820190506101835f830184610161565b9291505056fea26469706673582212201305ccf136f90696884df50c937e19e16366b95f04fdd095e251cd92bcbce32864736f6c634300081c003300";
const HELLO_WORLD_BYTECODE_2: &str = "608060405234801561000f575f5ffd5b506004361061003f575f3560e01c80630c55699c146100435780634018d9aa146100615780635197c7aa14610091575b5f5ffd5b61004b6100af565b60405161005891906100f2565b60405180910390f35b61007b60048036038101906100769190610139565b6100b4565b604051610088919061017e565b60405180910390f35b6100996100d2565b6040516100a691906100f2565b60405180910390f35b5f5481565b5f5f6103e8905080600181905550825f819055506001915050919050565b5f5f54905090565b5f819050919050565b6100ec816100da565b82525050565b5f6020820190506101055f8301846100e3565b92915050565b5f5ffd5b610118816100da565b8114610122575f5ffd5b50565b5f813590506101338161010f565b92915050565b5f6020828403121561014e5761014d61010b565b5b5f61015b84828501610125565b91505092915050565b5f8115159050919050565b61017881610164565b82525050565b5f6020820190506101915f83018461016f565b9291505056fea2646970667358221220c826a6d6f102da4050ad16b4b4335f88092170ea126701391a5d027311350bd964736f6c634300081c003300000000000000000000000000000000000000";

#[tokio::test]
async fn test_building_cfg() {
    // data/helloworld.sol: runtime code, not creation code
    let result1 = cfg::build_cfg_from_bytecode(HELLO_WORLD_BYTECODE_1).await;
    println!("Contract Cfg: {:#?}", result1);

    // data/helloworld.sol: runtime code, not creation code
    let result2 = cfg::build_cfg_from_bytecode(HELLO_WORLD_BYTECODE_2).await;
    println!("Contract Cfg: {:#?}", result2);
}

#[tokio::test]
async fn test_get_nodes() {
    // data/helloworld.sol: runtime code, not creation code
    let cfg_result = cfg::build_cfg_from_bytecode(HELLO_WORLD_BYTECODE_1)
        .await
        .unwrap();

    cfg::get_nodes(cfg_result);
}

#[test]
fn test_node_to_bytecode() {
    // 5f 00 35 60 e0 1c 80 63 21 25 b6 5b 14 60 34 57
    let input = "0x17 PUSH0 0\n0x18 CALLDATALOAD \n0x19 PUSH1 0xe0\n0x1b SHR \n0x1c DUP1 \n0x1d PUSH4 0x2125b65b\n0x22 EQ \n0x23 PUSH1 0x34\n0x25 JUMPI \n".to_string();
    let result = crate::cfg::node_to_bytecode(&input);
    assert_eq!("5f3560e01c80632125b65b14603457", result)
}

#[test]
fn test_node_to_bytecode_of_push0() {
    // 5f 00 5f 00 fd
    let input = "0x0c PUSH0 0\n0x0d PUSH0 0\n0x0e REVERT \n".to_string();
    let result = crate::cfg::node_to_bytecode(&input);
    assert_eq!("5f5ffd", result)
}

#[test]
fn test_bit_num() {
    let bit_num = 4;
    let value = 15;

    let hex_string = format!("{:01$X}", value, bit_num);
    assert_eq!(hex_string, "000F");
}
